<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴彦文</title>
  
  <subtitle>吴彦文的技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wuyanwen.cc/"/>
  <updated>2018-01-12T14:13:46.706Z</updated>
  <id>http://www.wuyanwen.cc/</id>
  
  <author>
    <name>吴彦文</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>thinkjsplus</title>
    <link href="http://www.wuyanwen.cc/2017/09/20/thinkjsplus.html"/>
    <id>http://www.wuyanwen.cc/2017/09/20/thinkjsplus.html</id>
    <published>2017-09-20T14:07:31.000Z</published>
    <updated>2018-01-12T14:13:46.706Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装-ThinkJS-命令"><a href="#1-安装-ThinkJS-命令" class="headerlink" title="1.安装 ThinkJS 命令"></a>1.安装 ThinkJS 命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g think-cli</span><br></pre></td></tr></table></figure><blockquote><p>可以通过 thinkjs -v 查看 think-cli 的版本号，此版本号非 thinkjs 的版本号</p><h4 id="项目地址-https-github-com-wuyanwen-thinkjsplus"><a href="#项目地址-https-github-com-wuyanwen-thinkjsplus" class="headerlink" title="项目地址  https://github.com/wuyanwen/thinkjsplus"></a>项目地址  <a href="https://github.com/wuyanwen/thinkjsplus" target="_blank" rel="noopener">https://github.com/wuyanwen/thinkjsplus</a></h4><p>喜欢的帮点击下star</p><h4 id="2-创建项目-thinkjsPlus"><a href="#2-创建项目-thinkjsPlus" class="headerlink" title="2.创建项目 thinkjsPlus"></a>2.创建项目 thinkjsPlus</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs new  thinkjsPlus</span><br></pre></td></tr></table></figure><p>创建项目时可以指定 –mode=module 参数创建多模块项目(thinkjs new  thinkjsPlus –mode=module ),本项目没用此参数.<br><a id="more"></a></p><h4 id="3-项目结构"><a href="#3-项目结构" class="headerlink" title="3.项目结构"></a>3.项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">|--- development.js   //开发环境下的入口文件</span><br><span class="line">|--- nginx.conf  //nginx 配置文件</span><br><span class="line">|--- package.json</span><br><span class="line">|--- pm2.json //pm2 配置文件</span><br><span class="line">|--- production.js //生产环境下的入口文件</span><br><span class="line">|--- README.md</span><br><span class="line">|--- src</span><br><span class="line">| |--- bootstrap  //启动自动执行目录 </span><br><span class="line">| | |--- master.js //Master 进程下自动执行</span><br><span class="line">| | |--- worker.js //Worker 进程下自动执行</span><br><span class="line">| |--- config  //配置文件目录</span><br><span class="line">| | |--- adapter.js  // adapter 配置文件 </span><br><span class="line">| | |--- config.js  // 默认配置文件 </span><br><span class="line">| | |--- config.production.js  //生产环境下的默认配置文件，和 config.js 合并 </span><br><span class="line">| | |--- extend.js  //extend 配置文件 </span><br><span class="line">| | |--- middleware.js //middleware 配置文件 </span><br><span class="line">| | |--- router.js //自定义路由配置文件</span><br><span class="line">| |--- controller  //控制器目录 </span><br><span class="line">| | |--- base.js</span><br><span class="line">| | |--- index.js</span><br><span class="line">| |--- logic //logic 目录</span><br><span class="line">| | |--- index.js</span><br><span class="line">| |--- model //模型目录</span><br><span class="line">| | |--- index.js</span><br><span class="line">|--- view  //模板目录</span><br><span class="line">| |--- index_index.html</span><br><span class="line">|--- www</span><br><span class="line">| |--- static  //静态资源目录</span><br><span class="line">| | |--- css</span><br><span class="line">| | |--- img</span><br><span class="line">| | |--- js</span><br></pre></td></tr></table></figure></blockquote><h4 id="4-项目服务启动"><a href="#4-项目服务启动" class="headerlink" title="4. 项目服务启动"></a>4. 项目服务启动</h4><blockquote><p>入口文件是 development.js，启动时直接和一般的node启动一样 node development.js即可。查看入口文件可知启动的时候，实际上是实例化 ThinkJS 里的 Application 类，执行 run 方法。</p></blockquote><h4 id="5-配置数据库"><a href="#5-配置数据库" class="headerlink" title="5.配置数据库"></a>5.配置数据库</h4><blockquote><p>本项目使用mysql数据库,配置文件的位置:src/config/adapter.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">exports.model = &#123;</span><br><span class="line">  type: &apos;mysql&apos;,</span><br><span class="line">  common: &#123;</span><br><span class="line">    logConnect: isDev,</span><br><span class="line">    logSql: isDev,</span><br><span class="line">    logger: msg =&gt; think.logger.info(msg)</span><br><span class="line">  &#125;,</span><br><span class="line">  mysql: &#123;</span><br><span class="line">    handle: mysql,</span><br><span class="line">    database: &apos;thinkjsplus&apos;,</span><br><span class="line">    prefix: &apos;&apos;,</span><br><span class="line">    encoding: &apos;utf8&apos;,</span><br><span class="line">    host: &apos;127.0.0.1&apos;,</span><br><span class="line">    port: &apos;3306&apos;,</span><br><span class="line">    user: &apos;root&apos;,</span><br><span class="line">    password: &apos;root&apos;,</span><br><span class="line">    dateStrings: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="5-1-创建模型文件"><a href="#5-1-创建模型文件" class="headerlink" title="5.1 创建模型文件"></a>5.1 创建模型文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs model +模型文件名</span><br></pre></td></tr></table></figure><h4 id="6-控制器"><a href="#6-控制器" class="headerlink" title="6. 控制器"></a>6. 控制器</h4><blockquote><p>创建控制器的命令是 thinkjs controller +控制器名,我们创建admin后台登录控制器,同时在视图层我们创建admin控制器对应的html页面admin_index.html页面,启动服务,浏览器访问<a href="http://localhost:8360/admin就可以访问到admin_index.html的登录页面" target="_blank" rel="noopener">http://localhost:8360/admin就可以访问到admin_index.html的登录页面</a>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thinkjs controller admin</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const user = this.model(&apos;thinkjsplus_user&apos;); // controller 里实例化模型</span><br><span class="line">const data = await user.select();</span><br><span class="line">this.assign(&apos;title&apos;,data);</span><br><span class="line">return this.display();</span><br></pre></td></tr></table></figure><h4 id="7-视图"><a href="#7-视图" class="headerlink" title="7. 视图"></a>7. 视图</h4><blockquote><p>thinkjs3默认模板引擎是 nunjucks,如果在控制器action中这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.assign(&apos;title&apos;,&quot;测试网页之thinkjsplus!&quot;);</span><br><span class="line">return this.display();</span><br></pre></td></tr></table></figure></p></blockquote><p>视图html页面中就可以这样写,拿到title<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;title&#125;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8-权限控制"><a href="#8-权限控制" class="headerlink" title="8. 权限控制"></a>8. 权限控制</h4><blockquote><p>权限代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = class extends think.Controller &#123;</span><br><span class="line">  async __before() &#123;</span><br><span class="line">    if(this.ctx.controller === &apos;admin&apos; &amp;&amp; this.ctx.action === &apos;index&apos;||this.ctx.action === &apos;login&apos; )&#123; //如果是admin_index那么久不验证了，直接返回给予登录。 </span><br><span class="line">        return;   </span><br><span class="line">    &#125; </span><br><span class="line">    let userinfo =await this.session(&apos;userinfo&apos;)</span><br><span class="line">    if (!think.isEmpty(userinfo))&#123;  </span><br><span class="line">      this.assign(&apos;userinfo&apos;,userinfo);  </span><br><span class="line">    &#125;else&#123;  </span><br><span class="line">      return this.redirect(&apos;/admin/index&apos;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="9-本项目用到了mysql数据库-CRUD操作具体可以查看项目-本项目具有详细注释"><a href="#9-本项目用到了mysql数据库-CRUD操作具体可以查看项目-本项目具有详细注释" class="headerlink" title="9.本项目用到了mysql数据库,CRUD操作具体可以查看项目,本项目具有详细注释"></a>9.本项目用到了mysql数据库,CRUD操作具体可以查看项目,本项目具有详细注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 保存分类</span><br><span class="line">   */</span><br><span class="line">  async saveAction() &#123;</span><br><span class="line">    let data = this.post();</span><br><span class="line">    if (think.isEmpty(data.id)) &#123;</span><br><span class="line">      //保存</span><br><span class="line">      let res = await this.model(&quot;thinkjsplus_category&quot;).add(data);</span><br><span class="line">      if (res) &#123;</span><br><span class="line">        this.json(&#123;&quot;succ&quot;:true&#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.json(&#123;&quot;succ&quot;:false&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      //更新</span><br><span class="line">      let res = await this.model(&quot;thinkjsplus_category&quot;).update(data);</span><br><span class="line">      if (res) &#123;</span><br><span class="line">        this.json(&#123;&quot;succ&quot;:true&#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.json(&#123;&quot;succ&quot;:false&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 删除分类</span><br><span class="line">   */</span><br><span class="line">  async delAction() &#123;</span><br><span class="line">    let categoryModel = this.model(&quot;thinkjsplus_category&quot;);</span><br><span class="line">    let posts = this.post(&quot;id&quot;);</span><br><span class="line">    let delNums = categoryModel.where(&#123;id: [&apos;IN&apos;, posts]&#125;).delete();</span><br><span class="line">    if(delNums)&#123;</span><br><span class="line">        this.json(&#123;&quot;succ&quot;:true&#125;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        this.json(&#123;&quot;succ&quot;:false&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 查看分类</span><br><span class="line">   */</span><br><span class="line">  async listAction() &#123;</span><br><span class="line">    const user = this.model(&apos;thinkjsplus_category&apos;); // controller 里实例化模型</span><br><span class="line">    const data = await user.select();</span><br><span class="line">    return this.json(data);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="10-运行本项目"><a href="#10-运行本项目" class="headerlink" title="10.运行本项目"></a>10.运行本项目</h4><blockquote><p>首先安装mysql,之后导入项目sql文件夹,然后在项目根目录下运行 npm install,之后运行 npm start,即可启动本项目</p></blockquote><h4 id="附项目截图"><a href="#附项目截图" class="headerlink" title="附项目截图"></a>附项目截图</h4><p><img src="//dn-cnode.qbox.me/FkiOd05ik4mKzq7Wiyy6Dboyb6X9" alt="1.jpg"><br><img src="//dn-cnode.qbox.me/FlVraQlCo-hEUKwdKWN1NjpTtGpm" alt="2.jpg"><br><img src="//dn-cnode.qbox.me/Fu_i42WbDNjgGwnRlxYAF1z5MHIU" alt="3.jpg"><br><img src="//dn-cnode.qbox.me/FpQSX4CRWBbQrrcLrSYa7RFuS5Nd" alt="4.jpg"><br><img src="//dn-cnode.qbox.me/Fn7cZ4lk9fDh5guOYGQAmmqRIIgH" alt="5.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-安装-ThinkJS-命令&quot;&gt;&lt;a href=&quot;#1-安装-ThinkJS-命令&quot; class=&quot;headerlink&quot; title=&quot;1.安装 ThinkJS 命令&quot;&gt;&lt;/a&gt;1.安装 ThinkJS 命令&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g think-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;可以通过 thinkjs -v 查看 think-cli 的版本号，此版本号非 thinkjs 的版本号&lt;/p&gt;
&lt;h4 id=&quot;项目地址-https-github-com-wuyanwen-thinkjsplus&quot;&gt;&lt;a href=&quot;#项目地址-https-github-com-wuyanwen-thinkjsplus&quot; class=&quot;headerlink&quot; title=&quot;项目地址  https://github.com/wuyanwen/thinkjsplus&quot;&gt;&lt;/a&gt;项目地址  &lt;a href=&quot;https://github.com/wuyanwen/thinkjsplus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wuyanwen/thinkjsplus&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;喜欢的帮点击下star&lt;/p&gt;
&lt;h4 id=&quot;2-创建项目-thinkjsPlus&quot;&gt;&lt;a href=&quot;#2-创建项目-thinkjsPlus&quot; class=&quot;headerlink&quot; title=&quot;2.创建项目 thinkjsPlus&quot;&gt;&lt;/a&gt;2.创建项目 thinkjsPlus&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;thinkjs new  thinkjsPlus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建项目时可以指定 –mode=module 参数创建多模块项目(thinkjs new  thinkjsPlus –mode=module ),本项目没用此参数.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular4 从零到实战讲解</title>
    <link href="http://www.wuyanwen.cc/2017/09/12/angularProjectPlus.html"/>
    <id>http://www.wuyanwen.cc/2017/09/12/angularProjectPlus.html</id>
    <published>2017-09-12T03:11:53.000Z</published>
    <updated>2018-01-12T12:08:22.301Z</updated>
    
    <content type="html"><![CDATA[<h5 id="项目源码地址："><a href="#项目源码地址：" class="headerlink" title="项目源码地址："></a>项目源码地址：</h5><p><a href="https://github.com/wuyanwen/angularProjectPlus.git" target="_blank" rel="noopener">https://github.com/wuyanwen/angularProjectPlus.git</a><br>喜欢的欢迎star</p><h4 id="1-angular4的优点"><a href="#1-angular4的优点" class="headerlink" title="1.angular4的优点"></a>1.angular4的优点</h4><blockquote><p>angular是一个比较完善的前端MVC框架，包含了模板，数据双向绑定，路由，服务，过滤器，依赖注入等等所有的功能，基本上只要你做web开发，angular都会提供一个，换句话说，相对于一些其它的只关注前端某一方面的框架来说，学习angluar这么一个框架，往框架里填东西，基本上可以搞定前端开发的所有问题。</p></blockquote><a id="more"></a><h4 id="2-全新的命令行工具Angular-CLI"><a href="#2-全新的命令行工具Angular-CLI" class="headerlink" title="2.全新的命令行工具Angular CLI"></a>2.全新的命令行工具Angular CLI</h4><blockquote><p>angular官方开发团队提供的一个命令行工具,可以生成一个新项目的骨架，或者生成我们需要的组件的基础代码，或者做为一个开发调试服务器构建部署运行我们的代码,自动化的单元测试等等。</p></blockquote><h4 id="3-搭建angular开发环境"><a href="#3-搭建angular开发环境" class="headerlink" title="3.搭建angular开发环境"></a>3.搭建angular开发环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#全局安装 Angular CLI (可以例用 ng -v 查看安装的版本信息)</span><br><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><h4 id="4-创建项目"><a href="#4-创建项目" class="headerlink" title="4.创建项目"></a>4.创建项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new angularProjectPlus</span><br></pre></td></tr></table></figure><blockquote><p>如果在后面加上 –routing参数，会在app目录下面多出来一个路由配置app-routing.module.ts文件,同时在app.module.ts文件中自动引入生成的路由配置文件，同时在app.component.html中引入<router-outlet></router-outlet>(注意本项目生成时没用这个参数，后面咱们是手写的，便于学习)</p><h4 id="5-启动开发服务器"><a href="#5-启动开发服务器" class="headerlink" title="5.启动开发服务器"></a>5.启动开发服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd angularProjectPlus</span><br><span class="line">ng serve --open</span><br></pre></td></tr></table></figure><h2 id="ng-serve命令会启动开发服务器，监听文件变化，并在修改这些文件时重新构建此应用。使用–open（或-o）参数可以自动打开浏览器并访问http-localhost-4200-。应用会用一条消息来跟你打招呼：Welcome-to-app如下图"><a href="#ng-serve命令会启动开发服务器，监听文件变化，并在修改这些文件时重新构建此应用。使用–open（或-o）参数可以自动打开浏览器并访问http-localhost-4200-。应用会用一条消息来跟你打招呼：Welcome-to-app如下图" class="headerlink" title="ng serve命令会启动开发服务器，监听文件变化，并在修改这些文件时重新构建此应用。使用–open（或-o）参数可以自动打开浏览器并访问http://localhost:4200/。应用会用一条消息来跟你打招呼：Welcome to app如下图!"></a>ng serve命令会启动开发服务器，监听文件变化，并在修改这些文件时重新构建此应用。使用–open（或-o）参数可以自动打开浏览器并访问<a href="http://localhost:4200/。应用会用一条消息来跟你打招呼：Welcome" target="_blank" rel="noopener">http://localhost:4200/。应用会用一条消息来跟你打招呼：Welcome</a> to app如下图!</h2><p><img src="https://www.angular.cn/generated/images/guide/cli-quickstart/app-works.png" alt="image"></p></blockquote><h4 id="6-angular启动过程"><a href="#6-angular启动过程" class="headerlink" title="6.angular启动过程"></a>6.angular启动过程</h4><blockquote><p>通过项目根目录下的angular-cli.json文件可以发现启动js文件位于src文件夹下的main.ts,页面的入口文件位于src文件夹下的index.html</p></blockquote><h4 id="7-实战开始"><a href="#7-实战开始" class="headerlink" title="7.实战开始"></a>7.实战开始</h4><h5 id="7-1-开发准备-引入第三方库-jquery及bootstrap"><a href="#7-1-开发准备-引入第三方库-jquery及bootstrap" class="headerlink" title="7.1.开发准备:引入第三方库,jquery及bootstrap"></a>7.1.开发准备:引入第三方库,jquery及bootstrap</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery --save</span><br><span class="line">npm install @types/jquery --save-dev</span><br><span class="line">npm install bootstrap --save</span><br><span class="line">npm install @types/bootstrap --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>@types/jquery和@types/bootstrap,因为Angular是使用TypeScript语言开发的，而jquery本质是JavaScript，TypeScript是不能直接使用的。我们需要先安装类型描述文件，让TypeScript认识jquery,bootstrap</p></blockquote><p>同时安装完上面的包之后，需要到根目录下找到.angular-cli.json文件，把其中的 “scripts”: []修改成如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: [</span><br><span class="line">    &quot;../node_modules/jquery/dist/jquery.min.js&quot;,</span><br><span class="line">    &quot;../node_modules/bootstrap/dist/js/bootstrap.min.js&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>同时需要把.angular-cli.json文件中的”styles”: [“styles.css”]修改成如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;styles&quot;: [</span><br><span class="line">       &quot;styles.css&quot;,</span><br><span class="line">       &quot;../node_modules/bootstrap/dist/css/bootstrap.min.css&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><blockquote><p><del>安装完成后，修改src目录下的tsconfig.app.json文件，将jquery添加到types数组中。把其中的”types”: []修改成如下(此步现在最新版本已经不需要改了)</del>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;types&quot;: [&quot;jquery&quot;]</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="7-2-生成项目组件"><a href="#7-2-生成项目组件" class="headerlink" title="7.2.生成项目组件"></a>7.2.生成项目组件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ng g component navbar</span><br><span class="line">ng g component footer</span><br><span class="line">ng g component carousel</span><br><span class="line">ng g component product</span><br><span class="line">ng g component stars</span><br><span class="line">ng g component search</span><br><span class="line">ng g component home</span><br><span class="line">ng g component product-detail</span><br></pre></td></tr></table></figure><blockquote><p>以上生成了页面的八个组件，每个组件都有相对应的组件的html页面，可以在入口页面app.component.html中加入组件如下代码（本项目用的是bootstrap样式）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;app-navbar&gt;&lt;/app-navbar&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-md-3&quot;&gt;</span><br><span class="line">      &lt;app-search&gt;&lt;/app-search&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;row carousel-container&quot;&gt;</span><br><span class="line">        &lt;app-carousel&gt;&lt;/app-carousel&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;app-product&gt;&lt;/app-product&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;app-footer&gt;&lt;/app-footer&gt;</span><br></pre></td></tr></table></figure></p><p>其中组件如果是动态，需要循环数据的时候，会用到angular的循环标签*ngFor，父子组件之间传值会用到angular里的@Input()至此基于angular页面组件方面的工作就到一段落了。</p><h5 id="7-3-使用angular路由-创建项目时如果带有–routing参数，会生成下面的这个文件，本项目是手工写入的，只需要修改app-module-ts文件就行-（app-routing-module-ts）"><a href="#7-3-使用angular路由-创建项目时如果带有–routing参数，会生成下面的这个文件，本项目是手工写入的，只需要修改app-module-ts文件就行-（app-routing-module-ts）" class="headerlink" title="7.3 使用angular路由(创建项目时如果带有–routing参数，会生成下面的这个文件，本项目是手工写入的，只需要修改app.module.ts文件就行)（app-routing.module.ts）"></a>7.3 使用angular路由(创建项目时如果带有–routing参数，会生成下面的这个文件，本项目是手工写入的，只需要修改app.module.ts文件就行)（app-routing.module.ts）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; Routes, RouterModule &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">const routes: Routes = [];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppRoutingModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>在const routes: Routes = [];数组里自定义我们的路由即可（带参数用的）。<br>app.module.ts文件需要修改的地方如下(本项目用的)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123;RouterModule, Routes&#125; from &quot;@angular/router&quot;;</span><br><span class="line">const routeConfig: Routes = [</span><br><span class="line">  &#123;path: &apos;&apos;, component: HomeComponent&#125;,</span><br><span class="line">  &#123;path: &apos;product/:id&apos;, component: ProductDetailComponent&#125;</span><br><span class="line">];</span><br><span class="line">imports: [</span><br><span class="line">   RouterModule.forRoot(routeConfig)</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>说到路由，就会让人想起页面之间的传递参数问题，好在angular路由里可以配置参数，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/product&apos;, product.id]&quot;&gt;&#123;&#123;product.title&#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>在详情页就可以用如下方式得到ID关在展示层html中显示如下;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export class ProductDetailComponent implements OnInit &#123;</span><br><span class="line">  public productId : number;</span><br><span class="line">  </span><br><span class="line">  constructor(private routerInfo: ActivatedRoute) &#123;&#125;</span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">      //----得到了id,并把它给了productId</span><br><span class="line">      this.productId=this.routerInfo.snapshot.params[&quot;id&quot;]</span><br><span class="line">      //----------------------------</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>html组件页面中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">商品ID为&#123;&#123;productId&#125;&#125;</span><br></pre></td></tr></table></figure></p><hr><h5 id="7-4-angular依赖注入-DI"><a href="#7-4-angular依赖注入-DI" class="headerlink" title="7.4 angular依赖注入(DI)"></a>7.4 angular依赖注入(DI)</h5><blockquote><p>学过java的朋友可能更了解，回为java中有个有名的框架springmvc,里面就有依赖注入，不过没关系，js估计也是学习各家语言所长，咱从头开始学。用到两个概念，提供器和注入器</p><ul><li style="list-style: none"><input type="checkbox" checked> app.module.ts文件中一般写提供器(组件中也可以写提供器)如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providers: [],</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>[x] 注入器一般写在组件的构造函数中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123;ActivatedRoute, Params&#125; from &quot;@angular/router&quot;;</span><br><span class="line">constructor(private routerInfo: ActivatedRoute) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>[x] 生成服务的命令 ng g service shared/product(服务名)</p><blockquote><p>本项目中用ng g service shared/product 生成一个产品服务来共享数据，期中用到angular依赖注入，具体本项目配置如下：</p><h5 id="app-module-ts"><a href="#app-module-ts" class="headerlink" title="app.module.ts"></a>app.module.ts</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providers: [ProductService]</span><br></pre></td></tr></table></figure></blockquote></li></ul><h5 id="product-component-ts"><a href="#product-component-ts" class="headerlink" title="product.component.ts"></a>product.component.ts</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">constructor(private productService:ProductService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">export class ProductComponent implements OnInit &#123;</span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    //service动态注入数据</span><br><span class="line">    this.products=this.productService.getProducts();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-5-数据双向绑定和管道"><a href="#7-5-数据双向绑定和管道" class="headerlink" title="7.5.数据双向绑定和管道"></a>7.5.数据双向绑定和管道</h5><h5 id="页面如下："><a href="#页面如下：" class="headerlink" title="页面如下："></a>页面如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input [(ngmodel)] =&quot;name&quot;&gt;</span><br><span class="line">&#123;&#123;name&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生成管道的命令是 ng g pipe pipe/multiple</p><h5 id="7-6-http通讯"><a href="#7-6-http通讯" class="headerlink" title="7.6 http通讯"></a>7.6 http通讯</h5><p>app.module.ts文件修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;HttpModule&#125; from &quot;@angular/http&quot;;</span><br><span class="line">imports: [</span><br><span class="line">    HttpModule</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="注意：http请求不是由get方法触发的，是由subscribe方法触发的，所以只写get方法不会在网络中有请求-。"><a href="#注意：http请求不是由get方法触发的，是由subscribe方法触发的，所以只写get方法不会在网络中有请求-。" class="headerlink" title="==注意：http请求不是由get方法触发的，是由subscribe方法触发的，所以只写get方法不会在网络中有请求==。"></a>==注意：http请求不是由get方法触发的，是由subscribe方法触发的，所以只写get方法不会在网络中有请求==。</h4><h4 id="8-构建和部署"><a href="#8-构建和部署" class="headerlink" title="8.构建和部署"></a>8.构建和部署</h4><ul><li>构建：编译和合并（ng build）</li><li>部署：与服务器整合<blockquote><p>部署时有一个坑(不加的话刷新页面的话就找不到路由了)，需要在app.module.ts配置如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123;HashLocationStrategy, LocationStrategy&#125; from &quot;@angular/common&quot;;</span><br><span class="line">providers: [&#123;provide: LocationStrategy, useClass: HashLocationStrategy&#125;]</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>另令如果后台接口和前台项目开发的时候不在同一个端口，还需要配置代理文件：新建 proxy.conf.json：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;/api&quot;: &#123;</span><br><span class="line">    &quot;target&quot;: &quot;http://localhost:8000&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并且在package.json文件修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;ng serve --proxy-config proxy.conf.json&quot;,</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>多环境：一套代码，支持多种环境<h4 id="9-实践总结"><a href="#9-实践总结" class="headerlink" title="9.实践总结"></a>9.实践总结</h4><blockquote><p>你的应用由些什么组件组成，组件之间的父子关系是什么样的，组件之间是如何路由的，组件之间是如何通讯的。组件需要输入什么东西，输出什么东西，动手写代码之前，这些问题必须有明确的答案，画一个组件树出来，让所有开发的人员，有一个共识。制定开发计划。</p></blockquote></li></ul><ol><li>使用Angular-CLI工具创建一个新项目；</li><li>按照你们之前设计的组件关系开始从下往上编写组件；</li><li>按照父子关系组装组件并配置路由；</li><li>在开发环境下测试应用；</li><li>构建应用并部署到测试/生产环境</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;项目源码地址：&quot;&gt;&lt;a href=&quot;#项目源码地址：&quot; class=&quot;headerlink&quot; title=&quot;项目源码地址：&quot;&gt;&lt;/a&gt;项目源码地址：&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/wuyanwen/angularProjectPlus.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wuyanwen/angularProjectPlus.git&lt;/a&gt;&lt;br&gt;喜欢的欢迎star&lt;/p&gt;
&lt;h4 id=&quot;1-angular4的优点&quot;&gt;&lt;a href=&quot;#1-angular4的优点&quot; class=&quot;headerlink&quot; title=&quot;1.angular4的优点&quot;&gt;&lt;/a&gt;1.angular4的优点&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;angular是一个比较完善的前端MVC框架，包含了模板，数据双向绑定，路由，服务，过滤器，依赖注入等等所有的功能，基本上只要你做web开发，angular都会提供一个，换句话说，相对于一些其它的只关注前端某一方面的框架来说，学习angluar这么一个框架，往框架里填东西，基本上可以搞定前端开发的所有问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="angular" scheme="http://www.wuyanwen.cc/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>从零开始使用React全家桶开发电商系统</title>
    <link href="http://www.wuyanwen.cc/2017/09/07/dianpingPlus.html"/>
    <id>http://www.wuyanwen.cc/2017/09/07/dianpingPlus.html</id>
    <published>2017-09-07T06:27:54.000Z</published>
    <updated>2018-01-12T12:08:22.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="技术栈："><a href="#技术栈：" class="headerlink" title="技术栈："></a>技术栈：</h3><p>react + react-router4.1 + redux + koa2 + koa-router + less + ES6/7 + webpack + fetch + bundle-loader</p><h3 id="项目说明："><a href="#项目说明：" class="headerlink" title="项目说明："></a>项目说明：</h3><h3 id="基于-react-react-router-redux-的项目，主要是为了学习实战react全家桶"><a href="#基于-react-react-router-redux-的项目，主要是为了学习实战react全家桶" class="headerlink" title="基于 react react-router redux 的项目，主要是为了学习实战react全家桶"></a>基于 react react-router redux 的项目，主要是为了学习实战react全家桶</h3><h3 id="github源码下载地址：https-github-com-wuyanwen-dianpinPlus-欢迎star"><a href="#github源码下载地址：https-github-com-wuyanwen-dianpinPlus-欢迎star" class="headerlink" title="github源码下载地址：https://github.com/wuyanwen/dianpinPlus - 欢迎star"></a><a href="https://github.com/wuyanwen/dianpinPlus" target="_blank" rel="noopener">github源码下载地址：https://github.com/wuyanwen/dianpinPlus</a> - 欢迎star</h3><a id="more"></a><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><pre><code>git clone https://github.com/wuyanwen/dianpinPluscd dianpinPlusnpm install</code></pre><h3 id="运行（nodejs-7-6-0-）"><a href="#运行（nodejs-7-6-0-）" class="headerlink" title="运行（nodejs 7.6.0+）"></a>运行（nodejs 7.6.0+）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm run dev (正常编译模式)</span><br><span class="line"></span><br><span class="line">访问 http://localhost:8080</span><br><span class="line"></span><br><span class="line">npm run build （发布生产版本，对代码进行混淆压缩，提取公共代码，分离css文件）</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><blockquote><p> 如果觉得不错的话，您可以点右上角 “Star” 支持一下 谢谢！ ^_^</p></blockquote><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote><p> 欢迎 issue 和 pr<br><br> 欢迎加入前端实战交流QQ群: 541024234</p></blockquote><h2 id="附项目截图"><a href="#附项目截图" class="headerlink" title="附项目截图"></a>附项目截图</h2><img src="http://ot7t4l1wm.bkt.clouddn.com/images/dianpinPlus1.jpg"><img src="http://ot7t4l1wm.bkt.clouddn.com/images/dianpinPlus2.jpg"><img src="http://ot7t4l1wm.bkt.clouddn.com/images/dianpinPlus3.jpg">]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;技术栈：&quot;&gt;&lt;a href=&quot;#技术栈：&quot; class=&quot;headerlink&quot; title=&quot;技术栈：&quot;&gt;&lt;/a&gt;技术栈：&lt;/h3&gt;&lt;p&gt;react + react-router4.1 + redux + koa2 + koa-router + less + ES6/7 + webpack + fetch + bundle-loader&lt;/p&gt;
&lt;h3 id=&quot;项目说明：&quot;&gt;&lt;a href=&quot;#项目说明：&quot; class=&quot;headerlink&quot; title=&quot;项目说明：&quot;&gt;&lt;/a&gt;项目说明：&lt;/h3&gt;&lt;h3 id=&quot;基于-react-react-router-redux-的项目，主要是为了学习实战react全家桶&quot;&gt;&lt;a href=&quot;#基于-react-react-router-redux-的项目，主要是为了学习实战react全家桶&quot; class=&quot;headerlink&quot; title=&quot;基于 react react-router redux 的项目，主要是为了学习实战react全家桶&quot;&gt;&lt;/a&gt;基于 react react-router redux 的项目，主要是为了学习实战react全家桶&lt;/h3&gt;&lt;h3 id=&quot;github源码下载地址：https-github-com-wuyanwen-dianpinPlus-欢迎star&quot;&gt;&lt;a href=&quot;#github源码下载地址：https-github-com-wuyanwen-dianpinPlus-欢迎star&quot; class=&quot;headerlink&quot; title=&quot;github源码下载地址：https://github.com/wuyanwen/dianpinPlus - 欢迎star&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/wuyanwen/dianpinPlus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github源码下载地址：https://github.com/wuyanwen/dianpinPlus&lt;/a&gt; - 欢迎star&lt;/h3&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://www.wuyanwen.cc/tags/react/"/>
    
      <category term="react-router" scheme="http://www.wuyanwen.cc/tags/react-router/"/>
    
      <category term="redux" scheme="http://www.wuyanwen.cc/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>从零开始使用vue搭建带有SSR服务端渲染的前后台项目weeklyPlus</title>
    <link href="http://www.wuyanwen.cc/2017/08/30/weeklyPlus.html"/>
    <id>http://www.wuyanwen.cc/2017/08/30/weeklyPlus.html</id>
    <published>2017-08-30T01:20:29.000Z</published>
    <updated>2018-01-12T12:08:22.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>使用 vue-cli 可以快速创建 vue 项目，使用 nuxt 可以快速创建 带有SSR服务端渲染的vue 项目，vue-cli很好用，nuxt也很好用，但是在最初搭建环境安装vue-cli及nuxt相关内容的时候，对一些人来说是很头疼的一件事情，特此写了一篇搭建环境的教程，每一步尽量详细解析。需要的朋友可以过来参考下，同时本项目也是vue中文社区周刊升级版实战项目，喜欢的可以到github点波star，希望可以帮到大家。<br>weeklyPlus vue中文社区周刊服务端渲染升级版weeklyPlus<br><a href="https://github.com/wuyanwen/weeklyPlus" target="_blank" rel="noopener">github源码下载地址：https://github.com/wuyanwen/weeklyPlus</a> - 欢迎star<br><a id="more"></a></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><ul><li>为什么要做一个这样的weeklyPlus系统?</li><li>可以做为知识的沉淀</li><li>可以熟悉最前沿且不仅限于前端的最新知识</li><li>可以传播到更多的需要这些知识的同学们</li><li>圈内已经有很多weekly系统了，weeklyPlus有什么不同吗?</li><li>我们保证是有态度（不求多，只求精）的周刊</li><li>我们保证发的每一篇文章都是有意义的</li><li>我们是open source ，欢迎每一位同学添砖加瓦</li></ul><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><a href="https://github.com/nuxt/nuxt.js" target="_blank" rel="noopener">nuxt</a> - vue 服务端渲染框架</li><li><a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">vue-cli</a> - Vue.js 提供的官方命令行工具，可用于快速搭建大型单页应用</li><li><a href="https://www.mongodb.com/" target="_blank" rel="noopener">mongodb</a> - 数据库</li><li><a href="http://koajs.com/" target="_blank" rel="noopener">koa</a> -  公开 API 接口</li><li><a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">element-ui</a> - 基础组件库</li><li><a href="https://github.com/mzabriskie/axios" target="_blank" rel="noopener">axios</a> - http 请求</li><li><p><a href="http://lesscss.org" target="_blank" rel="noopener">less</a> -  一种动态样式语言<br>web 应用</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2></li><li><p>周刊系统列表</p></li><li>周刊后台权限控制</li><li>周刊后台登录功能</li><li>周刊后台分类增删改查功能</li><li>周刊后台内容增删改查功能</li></ul><h2 id="开发部署"><a href="#开发部署" class="headerlink" title="开发部署"></a>开发部署</h2><h3 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h3><p>在node.js中文官网正常下载安装node.js就可以，没有什么特别需要注意的点（傻瓜式安装）。</p><p>在官网下载安装node.js后，就已经自带npm（包管理工具），不需要另外再进行安装npm了。</p><p>注意下载node.js版本最好要在node7.6以上，避免版本过低影响使用。这里强烈推荐大家安装node版本管理工具nvm。</p><p>打开命令行工具（随便哪个文件夹），输入命令行 node -v，npm -v，如果出现相应的版本号，则说明安装成功。</p><h3 id="2-运行weekplus项目"><a href="#2-运行weekplus项目" class="headerlink" title="2.运行weekplus项目"></a>2.运行weekplus项目</h3><p>本项目用的数据库是mongdb,开启mongdb,端口设为10086，强烈建议大家安装mongdb的客户端数据MongoChef可视化管理数据。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 切换到server文件夹,依次执行以下命令</span></span><br><span class="line">$ npm install </span><br><span class="line">$ npm run start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 切换到admin文件夹,依次执行以下命令</span></span><br><span class="line">$ npm install </span><br><span class="line">$ npm run start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 切回到项目根目录,</span></span><br><span class="line">$ npm install </span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>mongdb 数据库启动的服务端号是10086</li><li>server 文件夹启动的服务端号是1111</li><li>admin  文件夹启动的服务端号是2222,后台入口默认地址 <a href="http://localhost:2222/#/admin" target="_blank" rel="noopener">http://localhost:2222/#/admin</a></li><li>前台默认启动的服务端口号是3333,前台入口默认地址 <a href="http://localhost:3333/" target="_blank" rel="noopener">http://localhost:3333/</a></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>欢迎 issue 和 pr</li><li>欢迎加入前端实战交流QQ群: 541024234</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;p&gt;使用 vue-cli 可以快速创建 vue 项目，使用 nuxt 可以快速创建 带有SSR服务端渲染的vue 项目，vue-cli很好用，nuxt也很好用，但是在最初搭建环境安装vue-cli及nuxt相关内容的时候，对一些人来说是很头疼的一件事情，特此写了一篇搭建环境的教程，每一步尽量详细解析。需要的朋友可以过来参考下，同时本项目也是vue中文社区周刊升级版实战项目，喜欢的可以到github点波star，希望可以帮到大家。&lt;br&gt;weeklyPlus vue中文社区周刊服务端渲染升级版weeklyPlus&lt;br&gt;&lt;a href=&quot;https://github.com/wuyanwen/weeklyPlus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github源码下载地址：https://github.com/wuyanwen/weeklyPlus&lt;/a&gt; - 欢迎star&lt;br&gt;
    
    </summary>
    
    
      <category term="nuxt" scheme="http://www.wuyanwen.cc/tags/nuxt/"/>
    
      <category term="vue-cli" scheme="http://www.wuyanwen.cc/tags/vue-cli/"/>
    
      <category term="mongdb" scheme="http://www.wuyanwen.cc/tags/mongdb/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.wuyanwen.cc/2017/08/21/hello-world.html"/>
    <id>http://www.wuyanwen.cc/2017/08/21/hello-world.html</id>
    <published>2017-08-21T01:20:29.000Z</published>
    <updated>2018-01-12T14:02:54.234Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="hello world" scheme="http://www.wuyanwen.cc/tags/hello-world/"/>
    
  </entry>
  
</feed>
